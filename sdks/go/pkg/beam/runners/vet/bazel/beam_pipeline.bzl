load(
    "@io_bazel_rules_go//go:def.bzl",
    "go_context",
)

def _go_beam_code_generator_binary(ctx):
    go = go_context(ctx)

    ctx.actions.run(
        inputs = [],
        outputs = [ctx.outputs.generator_src_out],
        arguments = [
            "--output",
            ctx.outputs.generator_src_out.path,
            "--template_json",
            json.encode_indent(struct(
                go_package = ctx.attr.package,
                pipeline_import_path = ctx.attr.pipeline_importpath,
                construct_pipeline = "PipelineForCodeGenerator",
            )),
        ],
        progress_message = "Generating program that will generate code for package %s" % ctx.attr.pipeline_importpath,
        executable = ctx.executable._main_file_generator_tool,
    )

    # Example:
    # https://sourcegraph.com/github.com/bazelbuild/bazel-gazelle/-/blob/internal/gazelle_binary.bzl?L60
    library = go.new_library(go, is_main = True)
    attr = struct(
        srcs = [struct(files = [ctx.outputs.generator_src_out])],
        deps = ctx.attr.generator_deps + ctx.attr._standard_generator_deps,
        embed = [],
    )
    source = go.library_to_source(go, attr, library, ctx.coverage_instrumented())

    archive, executable, runfiles = go.binary(
        go,
        name = ctx.label.name,
        source = source,
        version_file = ctx.version_file,
        info_file = ctx.info_file,
    )

    source = go.library_to_source(go, attr, library, ctx.coverage_instrumented())

    ctx.actions.run(
        inputs = [],
        outputs = [ctx.outputs.out],
        arguments = [
            "--output",
            ctx.outputs.out.path,
        ],
        progress_message = "Generating program that will generate code for package %s" % ctx.attr.pipeline_importpath,
        executable = executable,
    )

    # source = go.library_to_source(go, attr, library, ctx.coverage_instrumented())

    # archive, out_executable, runfiles = go.binary(
    #     name = ctx.attr.name,
    #     source = source,
    # )
    return [
        library,
        source,
        archive,
        DefaultInfo(
            files = depset([executable]),
            runfiles = runfiles,
            executable = executable,
        ),
    ]

# See https://bazel.build/rules/rules-tutorial and
# https://github.com/bazelbuild/rules_go/blob/master/go/toolchains.rst#writing-new-go-rules
# for information about writing custom go toolchains.
#
# Examples:
# https://sourcegraph.com/github.com/bazelbuild/rules_go/-/blob/go/private/rules/binary.bzl
go_beam_code_generator_binary = rule(
    implementation = _go_beam_code_generator_binary,
    executable = True,
    attrs = {
        "generator_deps": attr.label_list(),
        "generator_src_out": attr.output(mandatory = True),
        "out": attr.output(mandatory = True),
        "package": attr.string(mandatory = True),
        "pipeline_importpath": attr.string(mandatory = True),
        "_go_config": attr.label(default = "@io_bazel_rules_go//:go_config"),
        "_stdlib": attr.label(default = "@io_bazel_rules_go//:stdlib"),
        "_go_context_data": attr.label(
            default = "@io_bazel_rules_go//:go_context_data",
        ),
        "_cgo_context_data": attr.label(default = "@io_bazel_rules_go//:cgo_context_data_proxy"),
        "_main_file_generator_tool": attr.label(
            executable = True,
            cfg = "exec",
            allow_files = True,
            default = Label("//go/pkg/beam/runners/vet/bazel/cmd/beambazel:beambazel"),
        ),
        "_standard_generator_deps": attr.label_list(
            default = [
                Label("//go/pkg/beam"),
                Label("//go/pkg/beam/runners/vet"),
            ],
        ),
    },
    toolchains = ["@io_bazel_rules_go//go:toolchain"],
    doc = """This builds a Go library from a set of source files that are all part of
    the same package.<br><br>
    ***Note:*** For targets generated by Gazelle, `name` is typically the last component of the path,
    or `go_default_library`, with the old naming convention.<br><br>
    **Providers:**
    <ul>
      <li>[GoLibrary]</li>
      <li>[GoSource]</li>
      <li>[GoArchive]</li>
    </ul>
    """,
)
