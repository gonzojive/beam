load(
    "@io_bazel_rules_go//go:def.bzl",
    "GoLibrary",
    "go_context",
)

def _go_beam_code_generator_binary(ctx):
    go = go_context(ctx)
    pass

# See https://bazel.build/rules/rules-tutorial and
# https://github.com/bazelbuild/rules_go/blob/master/go/toolchains.rst#writing-new-go-rules
# for information about writing custom go toolchains.
go_beam_code_generator_binary = rule(
    implementation = _go_beam_code_generator_binary,
    attrs = {
        "data": attr.label_list(allow_files = True),
        "srcs": attr.label_list(allow_files = True),
        "deps": attr.label_list(providers = [GoLibrary]),
        "importpath": attr.string(),
        "importmap": attr.string(),
        "embed": attr.label_list(providers = [GoLibrary]),
        "gc_goopts": attr.string_list(),
        "x_defs": attr.string_dict(),
        "_go_config": attr.label(default = "//:go_config"),
        "_stdlib": attr.label(default = "//:stdlib"),
        "_go_context_data": attr.label(
            default = "@io_bazel_rules_go//:go_context_data",
        ),
        "_cgo_context_data": attr.label(default = "//:cgo_context_data_proxy"),
    },
    toolchains = ["@io_bazel_rules_go//go:toolchain"],
    doc = """This builds a Go library from a set of source files that are all part of
    the same package.<br><br>
    ***Note:*** For targets generated by Gazelle, `name` is typically the last component of the path,
    or `go_default_library`, with the old naming convention.<br><br>
    **Providers:**
    <ul>
      <li>[GoLibrary]</li>
      <li>[GoSource]</li>
      <li>[GoArchive]</li>
    </ul>
    """,
)
